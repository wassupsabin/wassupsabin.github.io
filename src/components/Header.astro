---
const menuItems = [
  { title: 'Home', path: '/' },
  { title: 'About', path: '/about' },
  { title: 'Team', path: '/team' },
  { title: 'Activities', path: '/activities' },
  { title: 'Syllabus', path: '/syllabus' },
  { title: 'Donate', path: '/donate' },
  { title: 'Contact', path: '/contact' },
];

const currentPath = Astro.url.pathname;
const baseUrl = import.meta.env.BASE_URL;

// Function to prefix paths with the base URL
function getPath(path: string): string {
  // If path is already absolute URL, return as is
  if (path.startsWith('http')) return path;
  
  // Handle root path specially - combine with base URL
  if (path === '/') return baseUrl || '/';
  
  // For other paths, ensure proper joining of base URL and path
  return `${baseUrl}${path.startsWith('/') ? path : `/${path}`}`;
}
---

<header class="w-full bg-white shadow-sm fixed top-0 z-50 border-t-4 border-primary-red">
  <div class="container mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center h-16">
      <!-- Logo -->
      <div class="flex-shrink-0 flex items-center">
        <a href={getPath('/')} class="flex items-center" aria-label="Nepalese Southside Community Glasgow">
          <img 
            src={getPath('/images/logo.png')} 
            alt="Nepalese Southside Community Glasgow Logo" 
            class="h-10 w-auto"
          />
        </a>
      </div>

      <!-- Desktop Navigation -->
      <nav class="hidden lg:flex items-center space-x-8" aria-label="Main navigation">
        {menuItems.map(item => (
          <a 
            href={getPath(item.path)} 
            class={`transition-colors ${
              currentPath === getPath(item.path) || (item.path !== '/' && currentPath.startsWith(getPath(item.path))) 
                ? 'text-primary-red font-medium' 
                : 'text-gray-700 hover:text-primary-blue'
            }`}
          >
            {item.title}
          </a>
        ))}
      </nav>

      <!-- Mobile Navigation -->
      <div class="lg:hidden flex items-center">
        <button
          id="mobile-menu-button"
          class="ml-4 p-2 rounded-md text-gray-700 hover:bg-gray-100"
          aria-expanded="false"
          aria-controls="mobile-menu"
          aria-label="Toggle navigation menu"
        >
          <svg
            class="block h-6 w-6"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
            aria-hidden="true"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6h16M4 12h16M4 18h16"
            />
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile Menu -->
  <div
    id="mobile-menu"
    class="lg:hidden hidden bg-white border-t border-gray-200"
    role="dialog"
    aria-modal="true"
  >
    <div class="container mx-auto px-4 py-4 space-y-1">
      {menuItems.map(item => (
        <a
          href={getPath(item.path)}
          class={`block px-4 py-2 text-base font-medium rounded-md ${
            currentPath === getPath(item.path) || (item.path !== '/' && currentPath.startsWith(getPath(item.path)))
              ? 'text-primary-red bg-mountain-gray/5'
              : 'text-gray-700 hover:bg-gray-100'
          }`}
        >
          {item.title}
        </a>
      ))}
    </div>
  </div>
</header>

<script>
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mobileMenu = document.getElementById('mobile-menu');

  if (mobileMenuButton && mobileMenu) {
    mobileMenuButton.addEventListener('click', () => {
      const isExpanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';
      mobileMenuButton.setAttribute('aria-expanded', (!isExpanded).toString());
      
      if (!isExpanded) {
        mobileMenu.classList.remove('hidden');
        // Add animation classes
        mobileMenu.classList.add('animate-fade-in');
      } else {
        // Add animation classes for fade out
        mobileMenu.classList.add('animate-fade-out');
        // Wait for animation to complete before hiding
        setTimeout(() => {
          mobileMenu.classList.add('hidden');
          mobileMenu.classList.remove('animate-fade-out');
        }, 200);
      }
    });
  }

  // Close mobile menu when clicking outside
  document.addEventListener('click', (event) => {
    if (mobileMenu && !mobileMenu.contains(event.target as Node) && 
        mobileMenuButton && !mobileMenuButton.contains(event.target as Node)) {
      mobileMenu.classList.add('hidden');
      mobileMenuButton.setAttribute('aria-expanded', 'false');
    }
  });

  // Close mobile menu when window is resized to desktop size
  window.addEventListener('resize', () => {
    if (window.innerWidth >= 1024) { // lg breakpoint
      mobileMenu?.classList.add('hidden');
      mobileMenuButton?.setAttribute('aria-expanded', 'false');
    }
  });
</script>